[
  {
    "name": "parse_xml_categories",
    "description": "Extracts text elements under the CATEGORIES section from an XML file. The query must be a string containing valid XML content. The XML should have a CATEGORIES tag and properly structured child elements. Regex check for query: `.*<CATEGORIES>.*</CATEGORIES>.*`, fields extracted: list of child elements inside CATEGORIES. Example: `<ROOT><CATEGORIES><ITEM>Apple</ITEM></CATEGORIES></ROOT>`.",
    "function": null,
    "metadata": {
      "name": "parse_xml_categories",
      "description": "Extracts text elements under the CATEGORIES section from the XML file.",
      "args": "xml_content=\"\"",
      "returns": "List of text elements under the CATEGORIES section"
    },
    "script_content": "import xml.etree.ElementTree as ET\n\ndef parse_xml_categories(xml_content):\n    try:\n        root = ET.fromstring(xml_content)\n        categories_section = root.find('CATEGORIES')\n        if categories_section is None:\n            return \"Error: CATEGORIES section not found in the XML.\"\n        categories = [element.text for element in categories_section if element.text]\n        return categories\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:10:32.776658",
    "usage_count": 10,
    "last_used": "2025-07-11T14:18:32.224390",
    "optimized": true
  },
  {
    "name": "extract_food_names_from_spreadsheet",
    "description": "Extracts food names from a spreadsheet. The query must include the file path to a spreadsheet and the column name containing the food names. Regex: `^.+\\.csv$` for file path; fields: `file_path`, `column_name`. Example: file_path='foods.csv', column_name='Food Name'.",
    "function": null,
    "metadata": {
      "name": "extract_food_names_from_spreadsheet",
      "description": "Extracts food names from the spreadsheet.",
      "args": "file_path=\"\", column_name=\"\"",
      "returns": "List of food names",
      "requires": "pandas"
    },
    "script_content": "import pandas as pd\n\ndef extract_food_names_from_spreadsheet(file_path, column_name):\n    try:\n        data = pd.read_csv(file_path)\n        if column_name not in data.columns:\n            return f\"Error: Column '{column_name}' not found in the spreadsheet.\"\n        food_names = data[column_name].dropna().tolist()\n        return food_names\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:10:48.732868",
    "usage_count": 3,
    "last_used": "2025-07-11T14:18:36.195125",
    "optimized": true
  },
  {
    "name": "find_unique_food",
    "description": "Identifies a food item in a list that appears only once. The query must be a list of food names as strings. Regex: `^\\[.*\\]$` ensures the input is a list; fields extracted: unique food items. Example: query=['apple', 'banana', 'apple', 'carrot'].",
    "function": null,
    "metadata": {
      "name": "find_unique_food",
      "description": "Identifies the food item in the list that appears only once.",
      "args": "query=[]",
      "returns": "The unique food item (string) or a message if none/multiple unique items exist",
      "requires": "collections"
    },
    "script_content": "from collections import Counter\n\ndef find_unique_food(query):\n    try:\n        food_counts = Counter(query)\n        unique_foods = [food for food, count in food_counts.items() if count == 1]\n        if len(unique_foods) == 1:\n            return unique_foods[0]\n        elif len(unique_foods) == 0:\n            return \"No unique food item found.\"\n        else:\n            return \"Multiple unique food items found.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:11:23.787092",
    "usage_count": 10,
    "last_used": "2025-07-11T14:18:37.914149",
    "optimized": true
  },
  {
    "name": "match_unique_food_to_categories",
    "description": "Matches a unique food item to elements under CATEGORIES in an XML. Query format: unique_food=<string>, xml_string=<string>. Regex: `.*<CATEGORIES>.*</CATEGORIES>.*`, fields: unique food, matching categories. Example: unique_food='banana', xml_string='<ROOT><CATEGORIES>Banana</CATEGORIES></ROOT>'.",
    "function": null,
    "metadata": {
      "name": "match_unique_food_to_categories",
      "description": "Matches the unique food item from the spreadsheet to the text elements under CATEGORIES in the XML.",
      "args": "unique_food=\"\", xml_string=\"\"",
      "returns": "Matching category or a no-match message",
      "requires": "xml.etree.ElementTree"
    },
    "script_content": "import xml.etree.ElementTree as ET\n\ndef match_unique_food_to_categories(unique_food, xml_string):\n    try:\n        root = ET.fromstring(xml_string)\n        categories = root.findall(\".//CATEGORIES\")\n        for category in categories:\n            if unique_food in (category.text or ''):\n                return category.text\n        return f\"No match found for unique food: {unique_food}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:11:46.112924",
    "usage_count": 4,
    "last_used": "2025-07-11T14:17:24.719305",
    "optimized": true
  },
  {
    "name": "parse_spreadsheet_foods",
    "description": "Extracts food items from a spreadsheet file located at file_path. Query must specify the file path. Regex: `^.+\\.xlsx$`. Fields extracted: list of food items. Example: file_path='foods.xlsx'.",
    "function": null,
    "metadata": {
      "name": "parse_spreadsheet_foods",
      "description": "Extracts the list of food items from the spreadsheet.",
      "args": "file_path=\"\"",
      "returns": "List of food items",
      "requires": "pandas"
    },
    "script_content": "import pandas as pd\n\ndef parse_spreadsheet_foods(file_path):\n    try:\n        df = pd.read_excel(file_path)\n        if 'Food' not in df.columns:\n            return \"Error: 'Food' column not found in the spreadsheet.\"\n        return df['Food'].dropna().tolist()\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:12:36.943726",
    "usage_count": 2,
    "last_used": "2025-07-11T14:16:50.333922",
    "optimized": true
  },
  {
    "name": "match_food_to_categories",
    "description": "Matches a single unique food item with categories in XML. Query example: spreadsheet_foods=['apple'], xml_categories=['<CATEGORIES>Fruits: apple</CATEGORIES>']. Regex: `.*<CATEGORIES>.*`.",
    "function": null,
    "metadata": {
      "name": "match_food_to_categories",
      "description": "Matches the unique food item from the spreadsheet to the text elements under CATEGORIES in the XML.",
      "args": "query=\"\"",
      "returns": "Matching result string or error",
      "requires": "re"
    },
    "script_content": "import re\n\ndef match_food_to_categories(query=\"\"):\n    spreadsheet_foods = [\"apple\", \"banana\", \"carrot\", \"apple\"]\n    xml_categories = [\"Fruits: apple, banana\", \"Vegetables: carrot\"]\n    unique_food = None\n    for food in spreadsheet_foods:\n        if spreadsheet_foods.count(food) == 1:\n            unique_food = food\n            break\n    if not unique_food:\n        return \"No unique food item found in the spreadsheet.\"\n    for category in xml_categories:\n        if re.search(rf'\\b{unique_food}\\b', category, re.IGNORECASE):\n            return category\n    return f\"The unique food item '{unique_food}' was not found in any XML category.\"",
    "created_at": "2025-07-11T14:12:51.730025",
    "usage_count": 6,
    "last_used": "2025-07-11T14:18:39.676322",
    "optimized": true
  },
  {
    "name": "extract_food_from_spreadsheet",
    "description": "Extracts food names from a CSV. The query must specify a valid file_path to a CSV. Regex: `^.+\\.csv$`; fields: food names. Example: file_path='foods.csv'.",
    "function": null,
    "metadata": {
      "name": "extract_food_from_spreadsheet",
      "description": "Extracts food names from a CSV file given its file path.",
      "args": "file_path=\"\"",
      "returns": "List of food names or a file error message",
      "requires": "csv"
    },
    "script_content": "import csv\n\ndef extract_food_from_spreadsheet(file_path):\n    try:\n        food_names = []\n        with open(file_path, mode='r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            header = next(reader)\n            for row in reader:\n                if row:\n                    food_names.append(row[0])\n        return food_names\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
    "created_at": "2025-07-11T14:13:34.589695",
    "usage_count": 5,
    "last_used": "2025-07-11T14:18:08.249160",
    "optimized": true
  },
  {
    "name": "count_family_members",
    "description": "Counts the total number of adults and children who will attend a family reunion based on predefined family relationships in the query. The query format should follow the example: 'Count the attendees including my parents, my twin brother and his family, my aunt and her family, my grandma and her brother, and her brother's daughter's family.' Regex pattern: 'Count the attendees.*my (.+)' â€” Captures relationships of attendees in a single capturing group. Example query: 'Count the attendees including my parents, my twin brother and his family, my aunt and her family, my grandma and her brother, and her brother's daughter's family.'",
    "function": null,
    "metadata": {},
    "script_content": "import math\n\ndef count_family_members(query=\"\"):\n    try:\n        parents = 2  # Mother and father\n        you = 1  # Yourself\n        brother = 1  # Twin brother\n        sister_in_law = 1  # Brother's spouse\n        aunt = 1  # Aunt\n        uncle = 1  # Aunt's spouse\n        grandma = 1  # Grandma\n        grandmas_brother = 1  # Grandma's brother\n        grandmas_brothers_daughter = 1  # Grandma's brother's daughter\n        grandmas_brothers_daughters_spouse = 1  # Daughter's spouse\n\n        total_adults = (parents + you + brother + sister_in_law + aunt + uncle +\n                        grandma + grandmas_brother + grandmas_brothers_daughter + grandmas_brothers_daughters_spouse)\n\n        brothers_kids = 2  # Brother's two children\n        aunts_kid = 1  # Aunt's six-year-old\n        grandmas_brothers_daughters_kids = 3  # Daughter's three kids under 12\n\n        total_children = brothers_kids + aunts_kid + grandmas_brothers_daughters_kids\n\n        second_cousins = 3  # Grandma's brother's daughter's kids don't eat carbs\n        total_children_eating = total_children - second_cousins\n\n        return {\"total_adults\": total_adults, \"total_children_eating\": total_children_eating}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "created_at": "2025-07-11T15:06:40.993435",
    "usage_count": 1,
    "last_used": "2025-07-11T15:07:09.615511",
    "optimized": true
  },
  {
    "name": "calculate_potato_requirements",
    "description": "Calculates the number of potatoes required for a family reunion based on the number of adults and children provided in the query. The query should specify the adult and child counts explicitly. Regex pattern: 'Calculate potatoes for (\\d+) adults and (\\d+) children' â€” Captures adult and child counts. Example query: 'Calculate potatoes for 10 adults and 6 children.'",
    "function": null,
    "metadata": {},
    "script_content": "import math\n\ndef calculate_potato_requirements(adults, children):\n    try:\n        potato_per_adult = 1.5  # Adults eat 1.5 potatoes\n        potato_per_child = 0.5  # Children eat 0.5 potatoes\n\n        total_potatoes = (adults * potato_per_adult) + (children * potato_per_child)\n        total_weight = total_potatoes * 0.5  # Each potato weighs 0.5 pounds\n\n        return {\"total_potatoes\": total_potatoes, \"total_weight\": total_weight}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "created_at": "2025-07-11T15:06:55.948057",
    "usage_count": 1,
    "last_used": "2025-07-11T15:07:11.690903",
    "optimized": true
  },
  {
    "name": "determine_bag_count",
    "description": "Determines the number of 5-pound potato bags required based on the total weight of potatoes provided in the query. The query should specify the total weight of potatoes in pounds. Regex pattern: 'Determine bags for (\\d+\\.?\\d*) pounds' â€” Captures the total weight of potatoes. Example query: 'Determine bags for 9 pounds.'",
    "function": null,
    "metadata": {},
    "script_content": "import math\n\ndef determine_bag_count(total_weight):\n    try:\n        bag_weight = 5  # Each bag weighs 5 pounds\n        bags_needed = math.ceil(total_weight / bag_weight)\n        return {\"bags_needed\": bags_needed}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "created_at": "2025-07-11T15:07:06.565032",
    "usage_count": 1,
    "last_used": "2025-07-11T15:07:14.730997",
    "optimized": true
  }
]