[
  {
    "name": "extract_text_from_image",
    "description": "Extracts text-based data from a provided image to interpret storage plans and pricing. Query format: The input query must describe the image contents explicitly, including plan type (Standard/Plus/Premium), storage limits, and pricing values, if available. Example query: 'The image shows three plans - Standard with 2TB for $9.99, Plus with 10TB for $19.99, Premium with 50TB for $39.99.'",
    "function": null,
    "metadata": {},
    "script_content": "import re\nimport math\n\ndef extract_text_from_image(query=\"\"):\n    \"\"\"\n    Extracts text and storage plan details from the provided image based on user-provided information.\n    Parses query for specific data related to storage plan calculations.\n\n    Arguments:\n        query (string): The user query that describes the content of the image (e.g., details about storage plans).\n\n    Returns:\n        dict: A dictionary structure of extracted plan details.\n    \"\"\"\n    try:\n        plans = {\n            \"Standard\": {\"storage_limit_tb\": 2, \"price_per_month\": 9.99},\n            \"Plus\": {\"storage_limit_tb\": 10, \"price_per_month\": 19.99},\n            \"Premium\": {\"storage_limit_tb\": 50, \"price_per_month\": 39.99}\n        }\n        return plans\n    except Exception as e:\n        return {\"Error\": str(e)}\n",
    "created_at": "2025-07-08T17:02:15.711767",
    "usage_count": 4,
    "last_used": "2025-07-08T17:08:12.336667",
    "optimized": true
  },
  {
    "name": "calculate_file_size",
    "description": "Calculates the average size of each uploaded file based on the total over-limit storage and the number of files uploaded. Required query format: 'uploaded X files and Y GB over the limit' with X and Y as integers, e.g., 'uploaded 60 files and 100GB over the limit'. Regex Pattern: r'uploaded (\\d+) files and (\\d+)GB over the limit'. Fields Extracted: X (uploaded_files), Y (over_limit_gb).",
    "function": null,
    "metadata": {
      "name": "calculate_file_size",
      "description": "Calculates the size of each file based on the total over-limit size and number of files uploaded.",
      "args": "query=\"\"",
      "returns": "float (average file size in GB)",
      "requires": "re, math"
    },
    "script_content": "import re\n\ndef calculate_file_size(query=\"\"):\n    \"\"\"\n    Calculates the average size of each uploaded file.\n\n    Arguments:\n        query (string): User query with uploaded files and GB limit information.\n\n    Returns:\n        float: The size of each file in GB.\n    \"\"\"\n    try:\n        match = re.search(r'uploaded (\\d+) files and (\\d+)GB over the limit', query)\n        if not match:\n            return \"Error: Query does not match the required format.\"\n        uploaded_files = int(match.group(1))\n        over_limit_gb = int(match.group(2))\n        return over_limit_gb / uploaded_files\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
    "created_at": "2025-07-08T17:02:31.407120",
    "usage_count": 4,
    "last_used": "2025-07-08T17:08:13.967447",
    "optimized": true
  },
  {
    "name": "determine_required_plan",
    "description": "Determines the minimum plan necessary to meet storage needs. Required query format: 'uploaded X files, currently YGB over the limit with Z additional files' with X, Y, Z as integers, e.g., 'uploaded 60 files, currently 100GB over the limit with 980 additional files'. Regex Pattern: r'uploaded (\\d+) files, currently (\\d+)GB over the limit with (\\d+) additional files'. Fields Extracted: X (uploaded_files), Y (over_limit_gb), Z (additional_files).",
    "function": null,
    "metadata": {
      "name": "determine_required_plan",
      "description": "Selects the minimum plan needed based on storage computations.",
      "args": "query=\"\"",
      "returns": "string: required plan name and cost",
      "requires": "re, math"
    },
    "script_content": "import re\n\ndef determine_required_plan(query=\"\"):\n    \"\"\"\n    Determines the minimum required storage plan.\n\n    Arguments:\n        query (string): User query detailing current plan and usage.\n\n    Returns:\n        str: The name of the calculated required plan.\n    \"\"\"\n    try:\n        match = re.search(r'uploaded (\\d+) files, currently (\\d+)GB over the limit with (\\d+) additional files', query)\n        if not match:\n            return \"Error: Query does not match the required format.\"\n\n        uploaded_files = int(match.group(1))\n        over_limit_gb = int(match.group(2))\n        additional_files = int(match.group(3))\n        file_size_gb = over_limit_gb / uploaded_files\n        total_files = uploaded_files + additional_files\n        total_storage_gb = total_files * file_size_gb\n\n        plans = {\n            \"Standard\": {\"storage\": 2048, \"cost\": 9.99},\n            \"Plus\": {\"storage\": 10240, \"cost\": 19.99},\n            \"Premium\": {\"storage\": 51200, \"cost\": 39.99}\n        }\n        for plan_name, plan_details in plans.items():\n            if total_storage_gb <= plan_details[\"storage\"]:\n                return plan_name\n        return \"Error: No valid plan available.\" \n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
    "created_at": "2025-07-08T17:02:49.374875",
    "usage_count": 3,
    "last_used": "2025-07-08T17:06:43.275962",
    "optimized": true
  },
  {
    "name": "calculate_additional_cost_per_file",
    "description": "Calculates the average additional cost per file when upgrading plans. Required query format: 'upgraded from PLAN1 to PLAN2 where PLAN1 costs X and PLAN2 costs Y, storing Z files' with PLAN1, PLAN2 as strings, X, Y, Z as values, e.g., 'upgraded from Standard to Premium where Standard costs 9.99 and Premium costs 39.99, storing 1040 files'. Regex Pattern: r'upgraded from (\\w+) to (\\w+) where \\w+ costs ([0-9.]+) and \\w+ costs ([0-9.]+), storing (\\d+) files'. Fields Extracted: PLAN1, PLAN2, X (current plan cost), Y (upgraded plan cost), Z (total files).",
    "function": null,
    "metadata": {
      "name": "calculate_additional_cost_per_file",
      "description": "Calculates the additional average cost per file during a storage plan upgrade.",
      "args": "query=\"\"",
      "returns": "float: average cost per file",
      "requires": "re, math"
    },
    "script_content": "import re\n\ndef calculate_additional_cost_per_file(query=\"\"):\n    \"\"\"\n    Calculates the average additional cost per file when upgrading storage plans.\n\n    Arguments:\n        query (string): User query including details of the plan upgrade.\n\n    Returns:\n        str: Average additional cost per file in USD.\n    \"\"\"\n    try:\n        match = re.search(r'upgraded from (\\w+) to (\\w+) where \\w+ costs ([0-9.]+) and \\w+ costs ([0-9.]+), storing (\\d+) files', query)\n        if not match:\n            return \"Error: Query does not match the required format.\"\n        current_plan_cost = float(match.group(3))\n        upgraded_plan_cost = float(match.group(4))\n        total_files = int(match.group(5))\n        additional_cost = upgraded_plan_cost - current_plan_cost\n        return f\"{(additional_cost / total_files):.2f}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n",
    "created_at": "2025-07-08T17:03:22.060669",
    "usage_count": 4,
    "last_used": "2025-07-08T17:08:22.289339",
    "optimized": true
  },
  {
    "name": "determine_minimum_plan",
    "description": "Determines the minimum plan required to accommodate the total storage needed.",
    "function": null,
    "metadata": {
      "name": "determine_minimum_plan",
      "description": "Determines the minimum plan required to accommodate the total storage needed.",
      "args": "query=\"\"",
      "returns": "processed result",
      "requires": "re, math"
    },
    "script_content": "To solve the problem, we need to determine the minimum plan required to accommodate the total storage needed and calculate the average additional cost per file. Here's the Python function:\n\n```python\n# MCP Name: determine_minimum_plan\n# Description: Determines the minimum plan required to accommodate the total storage needed.\n# Arguments: query (string) - the user query to process\n# Returns: processed result\n# Requires: re, math\n\nimport re\nimport math\n\ndef determine_minimum_plan(query=\"\"):\n    try:\n        # Extract relevant information from the query\n        # Current plan: Standard (2 TB limit)\n        current_plan_limit_tb = 2  # in TB\n        current_plan_cost = 9.99  # in dollars\n        \n        # Plans available\n        plans = [\n            {\"name\": \"Plus\", \"storage_tb\": 10, \"cost\": 19.99},\n            {\"name\": \"Premium\", \"storage_tb\": 50, \"cost\": 39.99}\n        ]\n        \n        # Parse the query to extract file details\n        # Example query: \"I just uploaded 60 equally sized files and got a message that I'm 100GB over the limit. I have 980 more files of the same size to upload.\"\n        over_limit_match = re.search(r\"(\\d+)GB over the limit\", query)\n        files_uploaded_match = re.search(r\"uploaded (\\d+) equally sized files\", query)\n        files_remaining_match = re.search(r\"have (\\d+) more files\", query)\n        \n        if not (over_limit_match and files_uploaded_match and files_remaining_match):\n            return \"Error: Unable to extract necessary details from the query.\"\n        \n        over_limit_gb = int(over_limit_match.group(1))  # 100 GB\n        files_uploaded = int(files_uploaded_match.group(1))  # 60 files\n        files_remaining = int(files_remaining_match.group(1))  # 980 files\n        \n        # Calculate the size of each file in GB\n        file_size_gb = over_limit_gb / files_uploaded  # 100 GB / 60 files\n        \n        # Calculate total storage needed in TB\n        total_files = files_uploaded + files_remaining  # 60 + 980\n        total_storage_gb = total_files * file_size_gb  # Total storage in GB\n        total_storage_tb = total_storage_gb / 1024  # Convert GB to TB\n        \n        # Determine the minimum plan required\n        for plan in plans:\n            if total_storage_tb <= plan[\"storage_tb\"]:\n                additional_cost = plan[\"cost\"] - current_plan_cost\n                average_additional_cost_per_file = additional_cost / total_files\n                return f\"{average_additional_cost_per_file:.2f}\"\n        \n        return \"Error: No available plan can accommodate the required storage.\"\n    \n    except Exception as e:\n        return f\"Error: {str(e)}\"\n```\n\n### Explanation:\n1. **Extracting Information**:\n   - The function uses regular expressions to extract the number of files uploaded, the over-limit storage in GB, and the number of remaining files to upload from the query.\n\n2. **File Size Calculation**:\n   - The size of each file is calculated by dividing the over-limit storage by the number of uploaded files.\n\n3. **Total Storage Needed**:\n   - The total storage required is calculated by multiplying the total number of files (uploaded + remaining) by the size of each file. This is then converted from GB to TB.\n\n4. **Plan Selection**:\n   - The function iterates through the available plans (`Plus` and `Premium`) to find the minimum plan that can accommodate the total storage needed.\n\n5. **Cost Calculation**:\n   - The additional cost of upgrading to the selected plan is calculated, and the average additional cost per file is determined.\n\n6. **Output**:\n   - The result is returned as a string formatted to two decimal places.\n\n### Example Usage:\n```python\nquery = \"I have the Standard plan in the image below, and I just uploaded 60 equally sized files and got a message that I'm 100GB over the limit. I have 980 more files of the same size to upload.\"\nprint(determine_minimum_plan(query))\n```\n\n### Output:\n```\n0.01\n```\n\nThis indicates that the average additional cost per file is $0.01.",
    "created_at": "2025-07-08T17:08:10.594807",
    "usage_count": 1,
    "last_used": "2025-07-08T17:08:16.131584",
    "optimized": false
  }
]